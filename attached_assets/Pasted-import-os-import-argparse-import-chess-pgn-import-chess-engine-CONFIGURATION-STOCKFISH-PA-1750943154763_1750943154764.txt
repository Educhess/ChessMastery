import os
import argparse
import chess.pgn
import chess.engine

# === CONFIGURATION ===
STOCKFISH_PATH = "/Users/bzaar/Downloads/stockfish/stockfish"  # Adjust to your Stockfish binary
PGN_FOLDER = "/Users/bzaar/Downloads/lichess-analyzer/lichess_games"  # Folder containing PGN files

def analyze_game(path, engine, limit):
    with open(path, "r") as f:
        game = chess.pgn.read_game(f)
        board = game.board()
        node = game

        big_drops = []

        while node.variations:
            next_node = node.variation(0)
            played_move = next_node.move

            # === Evaluate before the move ===
            info_before = engine.analyse(board, limit)
            score_before_raw = info_before["score"].relative
            best_move = info_before.get("pv", [None])[0]

            if score_before_raw.is_mate():
                score_before = 100.0 if score_before_raw.mate() > 0 else -100.0
            else:
                score_before = score_before_raw.score() / 100

            # Convert moves to SAN (before board state changes)
            try:
                san_played = board.san(played_move)
            except:
                san_played = str(played_move)

            try:
                san_best = board.san(best_move) if best_move and board.is_legal(best_move) else "N/A"
            except:
                san_best = "N/A"

            # Apply the move
            board.push(played_move)

            # === Evaluate after the move ===
            info_after = engine.analyse(board, limit)
            score_after_raw = info_after["score"].relative

            if score_after_raw.is_mate():
                score_after = 100.0 if score_after_raw.mate() > 0 else -100.0
            else:
                score_after = score_after_raw.score() / 100

            move_number = board.fullmove_number
            print(f"Move {move_number}: {san_played:6} | Eval: {score_before:.2f} ‚Üí {score_after:.2f}")

            delta = abs(score_before - score_after)
            if delta >= 2.0 and played_move != best_move:
                big_drops.append((move_number, san_played, san_best, score_before, score_after))

            node = next_node

        # === Summary ===
        if big_drops:
            print("\n‚ö†Ô∏è  Significant Evaluation Drops:")
            for move_num, played, best, before, after in big_drops:
                print(f"  Move {move_num}: Played {played}, Best was {best}, Eval dropped from {before:.2f} to {after:.2f} (Œî = {before - after:.2f})")
        else:
            print("\n‚úÖ No major evaluation drops detected.")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--mode",
        choices=["fast", "accurate"],
        default="accurate",
        help="Choose analysis mode (default: accurate)"
    )
    args = parser.parse_args()

    # === Set engine depth/time based on mode ===
    if args.mode == "fast":
        limit = chess.engine.Limit(depth=12)
        print("‚ö° Fast mode (depth 12)")
    else:
        limit = chess.engine.Limit(time=0.5)
        print("üîç Accurate mode (time=0.5s)")

    # === Run analysis on all PGNs in folder ===
    with chess.engine.SimpleEngine.popen_uci(STOCKFISH_PATH) as engine:
        for filename in os.listdir(PGN_FOLDER):
            if filename.endswith(".pgn"):
                path = os.path.join(PGN_FOLDER, filename)
                print(f"\nüìÇ Game: {filename}")
                analyze_game(path, engine, limit)

if __name__ == "__main__":
    main()
